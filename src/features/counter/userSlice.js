import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  orders: [],
  value: 0,
};

export const getCartTotal = (orders) => {
  return orders.reduce((amount, item) => item.price + amount, 0);
};

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginToApp: (state, action) => {
      state.user = action.payload;
    },
    logoutOfApp: (state) => {
      state.user = null;
    },
    addtoCart: (state, action) => {
      return {
        ...state,
        orders: [...state.orders, action.payload.item],
      };
    },
    removefromCart: (state, action) => {
      const index = state.orders.findIndex(
        (orderItem) => orderItem.id === action.payload.id
      );

      let newOrder = [...state.orders];

      if (index >= 0) {
        newOrder.splice(index, 1);
      } else {
        console.warn(
          `Can't remove the id ${action.id} as it is not in the orders`
        );
      }

      return {
        ...state,
        orders: newOrder,
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { loginToApp, logoutOfApp, addtoCart, removefromCart } =
  userSlice.actions;

export const currentUser = (state) => state.user.user;
export const orderstoCart = (state) => state.user.orders;

export default userSlice.reducer;
